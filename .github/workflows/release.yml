name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write # publishing releases

env:
  PROJECT_DIR: falcon-operator
  IMAGE_NAME: falcon-operator
  IMAGE_TAG: latest
  IMAGE_REGISTRY: quay.io
  IMAGE_NAMESPACE: crowdstrike
  RELEASE_TAG: ${{ github.ref_name }}

jobs:
  create_release_info:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          echo ${GITHUB_REF#refs/heads/}
          exit 1

      - name: Getting latest release version
        run: |
          LATESTREL=$(gh api repos/$GITHUB_REPOSITORY/releases/latest -q .tag_name)
          echo "LATESTRELEASE=${LATESTREL}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Generate changelog
        id: changelog
        run: |
          echo "tag-name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          gh api repos/$GITHUB_REPOSITORY/releases/generate-notes \
            -f tag_name="${GITHUB_REF#refs/tags/}" \
            -f target_commitish=main \
            -q .body > NOTES.md
            cat NOTES.md >> CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Update release changes
        run: |
          git add CHANGELOG.md
          VERSION=${{ env.RELEASE_TAG }}
          NEWVERSION=${VERSION:1}
          OLDVERSION=$(grep ^VERSION Makefile | awk '{print $NF}')
          sed -i "s/$OLDVERSION/$NEWVERSION/g" -i Makefile
          git add -u
          git commit -m "Bumping to version $NEWVERSION"
          git push

      - name: Create release
        if: env.LATESTRELEASE != env.RELEASE_TAG
        run: |
          gh api repos/$GITHUB_REPOSITORY/releases \
          -f tag_name="${GITHUB_REF#refs/tags/}" \
          -f target_commitish=main \
          -f name="${GITHUB_REF#refs/tags/}" \
          -F generate_release_notes=true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Updating release
        if: env.LATESTRELEASE == env.RELEASE_TAG
        run: |
          gh release edit "${GITHUB_REF#refs/tags/}" \
          --title ${GITHUB_REF#refs/tags/} \
          --tag ${GITHUB_REF#refs/tags/} \
          --target main \
          --notes-file NOTES.md
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Upload release assets
        run: |
          gh release upload "${GITHUB_REF#refs/tags/}" deploy/falcon-operator.yaml
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # build-multiarch-operator:
  #   name: Build multi-architecture image
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       go-version: [1.18.x]

  #   steps:
  #     - name: Install qemu dependency
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y qemu-user-static

  #     - name: Set up Go ${{ matrix.go-version }}
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: ${{ matrix.go-version }}
  #       id: go

  #     # Checkout falcon-operator github repository
  #     - name: Checkout falcon-operator project
  #       uses: actions/checkout@v3
  #       with:
  #         repository: "crowdstrike/falcon-operator"

  #     - name: Create proper tag version
  #       id: set_version
  #       run: |
  #         VERSION=${{ env.RELEASE_TAG }}
  #         echo "VERSION=${VERSION:1}" >> $GITHUB_ENV

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         platforms: linux/arm64,linux/amd64,linux/s390x,linux/ppc64le

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.IMAGE_REGISTRY }}
  #         username: ${{ secrets.REGISTRY_LOGIN }}
  #         password: ${{ secrets.REGISTRY_PASSWORD }}

  #     - name: Setup Cross Compile Dockerfile
  #       run: sed -e '1 s/\(^FROM\)/FROM --platform=$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross

  #     - name: Build and push
  #       id: build_image_multiarch
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: ./Dockerfile.cross
  #         platforms: linux/arm64,linux/amd64,linux/s390x,linux/ppc64le
  #         push: true
  #         tags: |
  #           ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
  #         build-args: |
  #           VERSION=${{ env.VERSION }}

  #     - name: Check manifest
  #       run: |
  #         docker buildx imagetools inspect ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
  #         docker buildx imagetools inspect ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
